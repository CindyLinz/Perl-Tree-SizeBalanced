// vim: filetype=xs
#define PERL_NO_GET_CONTEXT
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

#include "ppport.h"

#include "const-c.inc"

#include "tree_common.h"

#define KV_PASTER(NAME, KEY, VALUE) NAME ## _ ## KEY ## _ ## VALUE
#define KV_EVALUATOR(NAME, KEY, VALUE) KV_PASTER(NAME, KEY, VALUE)
#define KV(NAME) KV_EVALUATOR(NAME, KEY, VALUE)

#define K_PASTER(NAME, KEY) NAME ## _ ## KEY
#define K_EVALUATOR(NAME, KEY) K_PASTER(NAME, KEY)
#define K(NAME) K_EVALUATOR(NAME, KEY)
#define V(NAME) K_EVALUATOR(NAME, VALUE)

#define I_EVALUATOR(NAME) NAME ## _id
#define I(NAME) I_EVALUATOR(NAME)

#define T_EVALUATOR(NAME) NAME ## _t
#define T(NAME) T_EVALUATOR(NAME)

#include "tree_customize.h"

#define KEY int
#  include "include_tree_with_different_value_type.h"
#undef KEY

#define KEY num
#  include "include_tree_with_different_value_type.h"
#undef KEY

MODULE = Tree::SizeBalanced		PACKAGE = Tree::SizeBalanced::Core		

INCLUDE: const-xs.inc

new(SV * class)
DESTROY(SV * obj)

size(SV *obj)
insert(SV * obj, SV * key, SV * value = &PL_sv_undef)
delete(SV * obj, SV * key)

find(SV * obj, SV * key)
find_lt(SV * obj, SV * key)
find_le(SV * obj, SV * key)
find_gt(SV * obj, SV * key)
find_ge(SV * obj, SV * key)

count_lt(SV * obj, SV * key)
count_le(SV * obj, SV * key)
count_gt(SV * obj, SV * key)
count_ge(SV * obj, SV * key)

find_min(SV * obj)
find_max(SV * obj)

skip_l(SV * obj, int offset)
skip_g(SV * obj, int offset)

dump(SV *obj)
check(SV * obj)
